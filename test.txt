0x00 0x0 // Literal 0
0x00 0x05 // Literal 5
0x00 0x06 // Literal 6
0x01 // Add 5 and 6
0x0a // Store result in register 0
0x00 0x00 // Literal 0
0x09 // Get value at register 0
0x07 // Print value of register 0
//Store reg[0] * random (store in reg[2]) into reg[1].
0x00 0x01 // Literal 1
0x00 0x00 // Literal 0
0x09 // Get value of register 0
0x00 0x02 // Literal 2
0x06 // rand
0x0a //Store the random in register 2
0x00 0x02 // Literal 10
0x09 //Get value at register 2
0x07 // Print value at register 2
0x00 0x02 // Literal 2
0x09 //Get value at register 2
0x03 // Multiply value of register 2 and value of register 0
0x0a // Store value into register 1
0x00 0x01 // Literal 1
0x09 // Get value at register 1
0x07 // Print value
//Subtract 9 from 0 and store the result in reg[3].
0x00 0x03 // Literal 3
0x00 0x00 // Literal 0
0x00 0x09 // Literal 9
0x02 // Subtract
0x0a // Store subtraction in register 3
0x00 0x03 // Literal 3
0x09 // Get value at register 3
0x07 // Print value at register 3
0x00 0x04 // Literal 4
0x00 0x00 //Literal 0
0x0a // Store 1 into register 4
0x00 0x04 // Literal 4
0x09 // Get value in register 4
0x13 // If true
0x00 0x01 // Literal 1
0x07 // Print 1
0x08 // End if
//Test if previous values are greater or less than each other
0x00 0x05 // Literal 5
0x00 0x00 // Literal 0
0x09 // Get value of register 0
0x00 0x01 // Literal 1
0x09 // Get value of register 1
0x11 // Compute if value of register 0 is greater than value of register 1
0x0a // Store result in register 5
0x00 0x05 // Literal 5
0x09 // Get value of register 5
0x13 // If reg[0] > reg[1]
0x00 0x00 // Literal 0
0x09 // Get value of register 0
0x07 // print
0x08 // End if block
0x00 0x05 // Literal 5
0x09 // Get value of register 5
0x0f // Invert value of register 5
0x13 // If reg[1] > reg[0]
0x00 0x01 // Literal 1
0x09 // Get value of register 1
0x07 // print
0x08 // End if block
//Testing a basic loop
0x00 0x06 // Literal 6
0x00 0x05 // Literal 5
0x0a // Store 5 into register 6.
0x00 0x00 // Literal 0
0x14 // Set marker[0] to this instruction.
0x00 0x06 // Literal 6
0x00 0x06 // Literal 6
0x09 // Get value of register 6
0x07 // Print value of register 6
0x00 0x06 // Literal 6
0x09 // Get value of register 6
0x00 0x01 // Literal 1
0x02 // Subtract 1 from value of register 6
0x0a // Store result back into register 6
0x00 0x06 // Literal 6
0x09 // Get value of register 6
0x00 0x00 // Literal 0
0x11 // Check if value of register 6 is greater than 0
0x13 // If value of register 6 is greater than 0
0x00 0x00 // Literal 0
0x15 // Jump to instruction at marker[0].
0x08 // End
//Characters and strings
0x00 0x07 // Literal 7
0x00 0x41 // Literal 65 -- maps to 'a'
0x0a // Store literal 65 to register 7
0x00 0x07 // Literal 7
0x09 // Get value of register 7
0x1a // Convert value of register 7 to a character
0x07 // Print the character
0x00 0x21 0x1a // Loads the character !
0x00 0x00 0x00 0x03 0x1c // Loads the letter d
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x11 0x1c // Loads the letter r
0x00 0x00 0x00 0x0e 0x1c // Loads the letter o
0x00 0x01 0x00 0x16 0x1c // Loads the letter W
0x00 0x20 0x1a // Loads the character space
0x00 0x00 0x00 0x0e 0x1c // Loads the letter o
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x04 0x1c // Loads the letter e
0x00 0x01 0x00 0x07 0x1c // Loads the letter H
0x00 0x0c 0x1b // Print last 12 characters
0x00 0x01 // Literal 1
0x09 // Get the value of register 1
0x00 0x20 0x1a // Loads the character space
0x00 0x3a 0x1a // Loads the character :
0x00 0x00 0x00 0x13 0x1c // Loads the letter t
0x00 0x00 0x00 0x12 0x1c // Loads the letter s
0x00 0x00 0x00 0x04 0x1c // Loads the letter e
0x00 0x01 0x00 0x13 0x1c // Loads the letter T
0x00 0x07 0x1b // Print the last 7 things
//Load program into the memory registers
0x00 0x7b // Literal 123
0x00 0x09 // Literal 9
0x1d // Load file 123.txt into registers starting at register 9
0x00 0x09 // Literal 9
0x09 // Load register 9
0x07 // Print value at register 9
