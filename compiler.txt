// Written by Joseph Boyle
// A compiler written in Indigo

// Here we reserve some constants and other data used in the compiler.
// We reserve the first 512 (0x0 thru 0x1ff) registers for the compiler's variables.
0x0 0x1 0x0 0x200 0xa // Register 1 contains the number of registers reserved for compiler use.
0x0 0x0 0x0 0x1 0x09 0xa // Register 0 contains the next available register for public use, which happens to be the value of register 1.
0x0 0x3 0x0 0x0 0x0 0x7fffffff 0x02 0x0a // Register 3 contains the symbol indicating that the next memory blocks are an array.


//Some functions used in the program

// FUNCTION 0: PRINTS HELLO WORLD!
0x0 0x0 0x0 0x0 0x1e // Declares a function, 0, which takes no arguments and prints Hello World!.
0x00 0x21 0x1a // Loads the character !
0x00 0x00 0x00 0x03 0x1c // Loads the letter d
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x11 0x1c // Loads the letter r
0x00 0x00 0x00 0x0e 0x1c // Loads the letter o
0x00 0x01 0x00 0x16 0x1c // Loads the letter W
0x00 0x20 0x1a // Loads the character space
0x00 0x00 0x00 0x0e 0x1c // Loads the letter o
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x04 0x1c // Loads the letter e
0x00 0x01 0x00 0x07 0x1c // Loads the letter H
0x00 0x0c 0x1b // Print last 12 characters
0x8 // End function

// FUNCTION 1: PRINTS TEST: (val of reg[1])
0x0 0x1 0x0 0x0 0x1e // Declares a function, 1, which takes no arguments and prints Test: (valOfReg[1])
0x0 0x1 0x09 // Get the value of register 1
0x00 0x20 0x1a // Loads the character space
0x00 0x3a 0x1a // Loads the character :
0x00 0x00 0x00 0x13 0x1c // Loads the letter t
0x00 0x00 0x00 0x12 0x1c // Loads the letter s
0x00 0x00 0x00 0x04 0x1c // Loads the letter e
0x00 0x01 0x00 0x13 0x1c // Loads the letter T
0x00 0x07 0x1b // Print the last 7 things
0x8 // End function

// FUNCTION 2: INCREMENTS VALUE OF "CURRENT REGISTER" REGISTER
0x0 0x2 0x0 0x0 0x1e // Declares a function, 2, which takes no arguments and increments the register indicating which register should be used next.
0x0 0x0 // Literal 0
0x0 0x0 0x9 // Load register 0
0x0 0x1 // Literal 1
0x1 // Add 1 to register 0s value
0x0a // Store value in registers
0x8 // End function

// FUNCTION 3: GETS THE "CURRENT REGISTER" FOR PROGRAMS TO ACCESS
0x0 0x3 0x0 0x0 0x1e // Declares a function, 3, which takes no arguments and pushes the register value of the current register.
0x0 0x0 0x9 // Read register 0
0x20 // Return the value of register 0
0x8 // End function

// Function 4: RETURNS THE "CURRENT REGISTER" AND THEN UPDATES IT
0x0 0x4 0x0 0x0 0x1e // Declares a function, 4, which takes no arguments and pushes the register value of the current register and then updates it.
0x0 0x2 0x1f // Update the value of the CURRENT REGISTER
0x0 0x3 0x1f // Get the value of the CURRENT REGISTER
0x0 0x1 // Literal 1
0x2 // Subtract
0x20 // Return the value of register 0
0x8 // End function

// Program execution
0x0 0x0 0x1f // Calling function 0
0x0 0x1 0x1f // Calling function 1

0x0 0x3 0x1f 0x07 // Print "CURRENT REGISTER"
0x0 0x2 0x1f // Increment register
0x0 0x3 0x1f 0x07 // Print "CURRENT REGISTER"
0x0 0x2 0x1f // Increment register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register

0x0 0x3 0x7 // Print something after we do that?
