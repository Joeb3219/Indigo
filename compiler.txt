// Written by Joseph Boyle
// A compiler written in Indigo

// Here we reserve some constants and other data used in the compiler.
// We reserve the first 1024 (0x0 thru 0x1ff) registers for the compiler's variables.
0x0 0x1 0x0 0x400 0xa // Register 1 contains the number of registers reserved for compiler use.
0x0 0x0 0x0 0x1 0x09 0xa // Register 0 contains the next available register for public use, which happens to be the value of register 1.
0x0 0x3 0x0 0x200 0xa // Register 3 contains the beginning register for where function arguments get stored
0x0 0x4 0x0 0x0 0xa // Register 4 contains the number of argument registers already in use.
0x0 0x10 0x0 0x0 0x0 0x7fffffff 0x02 0x0a // Register 16 contains the symbol indicating that the next memory blocks are an array.
0x0 0x11 0x0 0x0 0x0 0x6fffffff 0x02 0x0a // Register 17 contains the symbol indicating that the next memory block are an integer.
0x0 0x12 0x0 0x0 0x0 0x5fffffff 0x02 0x0a // Register 18 contains the symbol indicating that the next memory block is a character.

//Some functions used in the program

// FUNCTION 0: PRINTS HELLO WORLD!
0x0 0x0 0x0 0x0 0x1e // Declares a function, 0, which takes no arguments and prints Hello World!.
0x00 0x21 0x1a // Loads the character !
0x00 0x00 0x00 0x03 0x1c // Loads the letter d
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x11 0x1c // Loads the letter r
0x00 0x00 0x00 0x0e 0x1c // Loads the letter o
0x00 0x01 0x00 0x16 0x1c // Loads the letter W
0x00 0x20 0x1a // Loads the character space
0x00 0x00 0x00 0x0e 0x1c // Loads the letter o
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x0b 0x1c // Loads the letter l
0x00 0x00 0x00 0x04 0x1c // Loads the letter e
0x00 0x01 0x00 0x07 0x1c // Loads the letter H
0x00 0x0c 0x1b // Print last 12 characters
0x8 // End function

// FUNCTION 1: PRINTS TEST: (val of reg[1])
0x0 0x1 0x0 0x0 0x1e // Declares a function, 1, which takes no arguments and prints Test: (valOfReg[1])
0x0 0x1 0x09 // Get the value of register 1
0x00 0x20 0x1a // Loads the character space
0x00 0x3a 0x1a // Loads the character :
0x00 0x00 0x00 0x13 0x1c // Loads the letter t
0x00 0x00 0x00 0x12 0x1c // Loads the letter s
0x00 0x00 0x00 0x04 0x1c // Loads the letter e
0x00 0x01 0x00 0x13 0x1c // Loads the letter T
0x00 0x07 0x1b // Print the last 7 things
0x8 // End function

// FUNCTION 2: INCREMENTS VALUE OF "CURRENT REGISTER" REGISTER
0x0 0x2 0x0 0x0 0x1e // Declares a function, 2, which takes no arguments and increments the register indicating which register should be used next.
0x0 0x0 // Literal 0
0x0 0x0 0x9 // Load register 0
0x0 0x1 // Literal 1
0x1 // Add 1 to register 0s value
0x0a // Store value in registers
0x8 // End function

// FUNCTION 3: GETS THE "CURRENT REGISTER" FOR PROGRAMS TO ACCESS
0x0 0x3 0x0 0x0 0x1e // Declares a function, 3, which takes no arguments and pushes the register value of the current register.
0x0 0x0 0x9 // Read register 0
0x20 // Return the value of register 0
0x8 // End function

// Function 4: RETURNS THE "CURRENT REGISTER" AND THEN UPDATES IT
0x0 0x4 0x0 0x0 0x1e // Declares a function, 4, which takes no arguments and pushes the register value of the current register and then updates it.
0x0 0x2 0x1f // Update the value of the CURRENT REGISTER
0x0 0x3 0x1f // Get the value of the CURRENT REGISTER
0x0 0x1 // Literal 1
0x2 // Subtract
0x20 // Return the value of register 0
0x8 // End function

// Function 5: RETURNS THE "CURRENT" ARGUMENT FUNCTIONS REGISTER
0x0 0x5 0x0 0x0 0x1e // Declares a function, 5, which takes no arguments and returns register 3 + register 4.
0x0 0x3 0x9 // Loads register 3
0x0 0x4 0x9 // Loads register 4
0x1 // Adds together
0x20 // Return the value of register 3 + register 4;
0x8 // End function

// Function 6: RETURNS THE CURRENT ARGUMENT REGISTER, OFFSET BY A SPECIFIED VALUE (used by functions to find the beginning of their argument stack).
0x0 0x6 0x0 0x1 0x1e // Declares a function, 6, which takes one argument, the number of arguments accepted by the function, and returns function 5 minus that quantity.
0x0 0x5 0x1f // Load the "CURRENT ARGUMENT" value
// We move back one register so we can read our argument input
0x0 0x5 0x1f // Load the "CURRENT ARGUMENT" value
0x9 // Read the value -- this is the argument passed by the function
0x2 // Subtract from the first retrieved value
0x0 0x1 0x2 // Subtract 1
0x20 // Return ("current argument" - passed argument) - 1.
0x8 // End function

// Function 7: FREES UP A REGISTER AT AN INDICATED ADDRESS
// CURRENTLY UNIMPLEMNTED.
0x0 0x7 0x0 0x1 0x1e // Declares a function, 7, which takes one argument (a memory address) and frees it.
0x8


// FUNCTION 8: TAKES AN OBJECT TYPE AND A VALUE AND RETURNS THE POINTER TO THE MEMORY ADDRESS
0x0 0x8 0x0 0x2 0x1e // Declares a function, 8, which takes two arguments and returns a pointer to the created object.
0x0 0x4 0x1f // Grabs the current register we can write to + increments it
0x0 0x1 0x0 0x6 0x1f // Grabs the first parameter
0x9 0x9 0xa // Reads the value of the register and then pushes it to the memory address
0x0 0x3 0x1f // Grabs the current register we can write to
0x0 0x0 0x0 0x6 0x1f // Grabs the second parameter
0x9 0xa // Reads the value of the register and then pushes it to the memory address
0x0 0x3 0x1f 0x0 0x1 0x2 // Subtract one from the register value so we are back at where the pointer should point.
0x20 // Return
0x8 // End function

// Function 9: PRINTS THE RAW VALUE STORED AT THE REGISTER INDICATED BY THE FIRST ARGUMENT (INTEGER REPRESENTATION)
0x0 0x9 0x0 0x1 0x1e // Declares a function, 9, which takes one argument and prints it.
0x0 0x0 0x0 0x6 0x1f // Get the first parameter
0x9 // Load the value that this is pointing to.
0x0 0x1 0x1 // Move past the type declaration to the actual data.
0x9 // Get the value of this cell
0x7 // Print
0x8 // End function

// Program execution
0x0 0x0 0x1f // Calling function 0
0x0 0x1 0x1f // Calling function 1

0x0 0x3 0x1f 0x07 // Print "CURRENT REGISTER"
0x0 0x2 0x1f // Increment register
0x0 0x4 0x1f 0x07 // Print the "CURRENT REGISTER" and then update that register
0x0 0x5 0x1f 0x07 // Print the current argument register
0x0 0x0 0x0 0x6 0x1f 0x7 // A test

// Store something at a memory address, then pass a pointer to a function
0x0 0x11 // Literal 17 : INTEGER
0x0 0xffff // Literal 255
0x0 0x8 0x1f // Store this into memory
0x0 0x9 0x1f // Call the print function
